# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
Â  Â  https://colab.research.google.com/drive/1Xx293rA2OXHF49fqybjAdZY5Mu7MQ6kl
"""
pip install pymupdf

import gradio as gr
import fitz Â # PyMuPDF for PDF extraction
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load IBM Granite model (replace with actual IBM Granite model name if different)
tokenizer = AutoTokenizer.from_pretrained("ibm-granite/granite-3.3-2b-instruct")
model = AutoModelForCausalLM.from_pretrained("ibm-granite/granite-3.3-2b-instruct")

def extract_text_from_pdf(pdf_path):
Â  Â  doc = fitz.open(pdf_path)
Â  Â  text = ""
Â  Â  for page in doc:
Â  Â  Â  Â  text += page.get_text()
Â  Â  return text

def smart_sdlc_run(pdf_file, prompt, sdlc_phase, language, framework, action):
Â  Â  input_text = ""
Â  Â  if pdf_file:
Â  Â  Â  Â  input_text = extract_text_from_pdf(pdf_file.name)
Â  Â  elif prompt:
Â  Â  Â  Â  input_text = prompt
Â  Â  else:
Â  Â  Â  Â  return "Please upload a PDF or enter a prompt."

Â  Â  full_prompt = f"{action} for {sdlc_phase} using {language} and {framework}: {input_text}"

Â  Â  inputs = tokenizer(full_prompt, return_tensors="pt")
Â  Â  outputs = model.generate(inputs["input_ids"], max_length=200, num_return_sequences=1)
Â  Â  result = tokenizer.decode(outputs[0], skip_special_tokens=True)
Â  Â  return result

with gr.Blocks(css="""
.gradio-container {
Â  background-color: orange;
Â  padding: 20px;
Â  border-radius: 10px;
}
.textbox-bordered {
Â  border: 4px solid green; Â /* Dark blue thick border */
Â  border-radius: 6px;
Â  box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
}
.custom-run-button {
Â  background-color: #4CAF50 !important; Â /* Green button */
Â  color: white !important;
Â  font-weight: bold;
Â  border-radius: 8px;
Â  padding: 10px 20px;
}
.small-file-btn {
Â  max-width: 150px;
Â  max-height: 105px;
Â  border-radius: 8px;
Â  border: 150px solid green;
}
""") as demo:
Â  Â  gr.Markdown("ðŸš€ **SmartSDLC: AI-Enhanced Software Development Lifecycle**")

Â  Â  with gr.Row():
Â  Â  Â  Â  output_text = gr.Textbox(label="Generated Output", lines=10, elem_classes=["textbox-bordered"])

Â  Â  with gr.Row():
Â  Â  Â  Â  file_input = gr.File(label="Upload PDF (optional)", file_types=['.pdf'], type="filepath", elem_classes=["small-file-btn"])
Â  Â  Â  Â  prompt_input = gr.Textbox(label="Or enter a prompt", lines=2)

Â  Â  with gr.Row():
Â  Â  Â  Â  sdlc_phase = gr.Dropdown(choices=["Requirements", "Design", "Development", "Testing", "Deployment"], value="Requirements", label="SDLC Phase")

Â  Â  Â  Â  action = gr.Radio(choices=["Extract Requirements", "Generate Code"], value="Extract Requirements", label="Action")

Â  Â  run_button = gr.Button("Run SmartSDLC", elem_classes=["custom-run-button"])

Â  Â  run_button.click(
Â  Â  Â  Â  smart_sdlc_run,
Â  Â  Â  Â  inputs=[file_input, prompt_input, sdlc_phase, action],
Â  Â  Â  Â  outputs=output_text
Â  Â  )

demo.launch(debug=True)
